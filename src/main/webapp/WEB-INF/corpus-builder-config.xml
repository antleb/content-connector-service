<!--suppress XmlUnusedNamespaceDeclaration -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:util="http://www.springframework.org/schema/util"

       xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/jdbc     
        http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-3.2.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-4.1.xsd">

    <bean id="placeholderConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName">
            <value>SYSTEM_PROPERTIES_MODE_OVERRIDE</value>
        </property>
        <property name="locations">
            <list>
                <value>classpath*:/application.properties</value>
            </list>
        </property>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="ignoreResourceNotFound" value="true"/>
    </bean>

    <bean id="workQueue" class="java.util.concurrent.LinkedBlockingQueue"/>
    <bean id="threadPoolExecutor" class="java.util.concurrent.ThreadPoolExecutor">
        <constructor-arg index="0" type="int" value="10"/>
        <constructor-arg index="1" type="int" value="10"/>
        <constructor-arg type="long" value="0"/>
        <constructor-arg>
            <value type="java.util.concurrent.TimeUnit">MILLISECONDS</value>
        </constructor-arg>
        <constructor-arg ref="workQueue"/>
    </bean>

    <bean id="storeRESTClient" class="eu.openminted.store.restclient.StoreRESTClient">
        <constructor-arg index="0" type="String" value="${store.host}"/>
    </bean>

    <bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <constructor-arg index="0" type="String" value="${jms.host}"/>
    </bean>

    <!-- Redis Configuration -->
    <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"/>
    <bean class="org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory">
        <constructor-arg name="host" value="${redis.host}"/>
        <constructor-arg name="port" value="${redis.port}"/>
        <property name="password" value="${redis.password}" />
    </bean>


    <security:global-method-security pre-post-annotations="enabled" proxy-target-class="true"
                                     authentication-manager-ref="authenticationManager"/>

    <security:http auto-config="false" use-expressions="true"
                   disable-url-rewriting="true" entry-point-ref="authenticationEntryPoint"
                   pattern="/**">

        <security:custom-filter before="PRE_AUTH_FILTER" ref="openIdConnectAuthenticationFilter"/>

        <!--<security:logout logout-url="/openid_logout" invalidate-session="true"/>-->

    </security:http>

    <bean id="authenticationEntryPoint"
          class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <constructor-arg type="java.lang.String" value="/openid_connect_login"/>
    </bean>

    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="openIdConnectAuthenticationProvider"/>
    </security:authentication-manager>

    <bean id="openIdConnectAuthenticationProvider" class="org.mitre.openid.connect.client.OIDCAuthenticationProvider">
        <property name="authoritiesMapper">
            <bean class="org.mitre.openid.connect.client.NamedAdminAuthoritiesMapper">
                <property name="admins" ref="namedAdmins"/>
            </bean>
        </property>
    </bean>

    <util:map id="userRoles">
        <entry key="urn:mace:openminted.eu:aai.openminted.eu:group:OpenAIRE+Super+Administrator" value="ROLE_ADMIN"/>
    </util:map>

    <util:set id="namedAdmins" value-type="org.mitre.openid.connect.client.SubjectIssuerGrantedAuthority">
        <!--
            This is an example of how to set up a user as an administrator: they'll be given ROLE_ADMIN in addition to ROLE_USER.
            Note that having an administrator role on the IdP doesn't grant administrator access on this client.
            These are values from the demo "openid-connect-server-webapp" project of MITREid Connect.
        -->
        <bean class="org.mitre.openid.connect.client.SubjectIssuerGrantedAuthority">
            <constructor-arg name="subject" value="subject_value"/>
            <constructor-arg name="issuer" value="${oidc.issuer}"/>
        </bean>
    </util:set>

    <!--<bean class="eu.openminted.registry.beans.FrontEndLinkURIAuthenticationSuccessHandler" id="frontEndRedirect">-->
    <!--<property name="frontEndURI" value="${webapp.front}"/>-->
    <!--</bean>-->
    <!--
      -
      - The authentication filter
      -
      -->
    <bean id="openIdConnectAuthenticationFilter" class="org.mitre.openid.connect.client.OIDCAuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManager"/>

        <property name="issuerService" ref="staticIssuerService"/>
        <property name="serverConfigurationService" ref="staticServerConfigurationService"/>
        <property name="clientConfigurationService" ref="staticClientConfigurationService"/>
        <property name="authRequestOptionsService" ref="staticAuthRequestOptionsService"/>
        <property name="authRequestUrlBuilder" ref="plainAuthRequestUrlBuilder"/>
        <!--<property name="authenticationSuccessHandler" ref="frontEndRedirect"/>-->

    </bean>


    <!--
      -
      -	Issuer Services: Determine which identity provider issuer is used.
      -
      -->


    <!--
        Static issuer service, returns the same issuer for every request.
    -->
    <bean class="org.mitre.openid.connect.client.service.impl.StaticSingleIssuerService" id="staticIssuerService">
        <property name="issuer" value="${oidc.issuer}"/>
    </bean>

    <bean class="org.mitre.openid.connect.client.service.impl.HybridIssuerService" id="hybridIssuerService">
        <property name="loginPageUrl" value="login"/>
        <property name="forceHttps"
                  value="false"/> <!-- this default property forces the webfinger issuer URL quantity be HTTPS, turn off for development work -->
    </bean>

    <!--
		Dynamic server configuration, fetches the server's information using OIDC Discovery.
	-->
    <bean class="org.mitre.openid.connect.client.service.impl.StaticServerConfigurationService"
          id="staticServerConfigurationService">
        <property name="servers">
            <map>
                <entry key="${oidc.issuer}">
                    <bean class="org.mitre.openid.connect.config.ServerConfiguration">
                        <property name="issuer" value="${oidc.issuer}"/>
                        <property name="authorizationEndpointUri" value="${oidc.issuer}authorize"/>
                        <property name="tokenEndpointUri" value="${oidc.issuer}token"/>
                        <property name="userInfoUri" value="${oidc.issuer}userinfo"/>
                        <property name="jwksUri" value="${oidc.issuer}jwk"/>
                        <property name="revocationEndpointUri" value="${oidc.issuer}revoke"/>
                    </bean>
                </entry>
            </map>
        </property>
    </bean>


    <!--
       Static Client Configuration. Configures a client statically by storing configuration on a per-issuer basis.
   -->

    <bean class="org.mitre.openid.connect.client.service.impl.StaticClientConfigurationService"
          id="staticClientConfigurationService">
        <property name="clients">
            <map>
                <entry key="${oidc.issuer}">
                    <bean class="org.mitre.oauth2.model.RegisteredClient">
                        <property name="clientId" value="${oidc.id}"/>
                        <property name="clientSecret" value="${oidc.secret}"/>
                        <property name="scope">
                            <set value-type="java.lang.String">
                                <value>openid</value>
                            </set>
                        </property>
                        <property name="tokenEndpointAuthMethod" value="SECRET_BASIC"/>
                        <property name="redirectUris">
                            <set>
                                <value>${webapp.home}</value>
                            </set>
                        </property>
                    </bean>
                </entry>
            </map>
        </property>
    </bean>


    <!--
	  -
	  -	Auth request options service: returns the optional components of the request
	  -
	  -->
    <bean class="org.mitre.openid.connect.client.service.impl.StaticAuthRequestOptionsService"
          id="staticAuthRequestOptionsService">
        <property name="options">
            <map>
                <!-- Entries in this map are sent as key-value parameters quantity the auth request -->
                <!--
                <entry key="display" value="page" />
                <entry key="max_age" value="30" />
                <entry key="prompt" value="none" />
                -->
            </map>
        </property>
    </bean>

    <!--
	  -
	  - Authorization URL Builders: create the URL quantity redirect the user quantity for authorization.
	  -
	  -->

    <!--
        Plain authorization request builder, puts all options as query parameters on the GET request
    -->
    <bean class="org.mitre.openid.connect.client.service.impl.PlainAuthRequestUrlBuilder"
          id="plainAuthRequestUrlBuilder"/>

    <bean id="webexpressionHandler"
          class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>

</beans>